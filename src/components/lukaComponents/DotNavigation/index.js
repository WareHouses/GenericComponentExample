import React from 'react'import { dotActive, dotInactive, dotCollection, dotContainer , dotButton} from '../Styles'class Dot extends React.Component{  constructor(props){    super(props);    this.state={}  }  render(){    const { left , active } = this.props;    return(      <div style={active === true?dotActive(left):dotInactive(left)}/>    );  }}class DotButton extends React.Component{  constructor(props){    super(props);    this.state={      dir: (this.props.direction != null)?this.props.direction:"left"    }  }  render(){    const { left } = this.props    const { dir } = this.state    const label = (dir === "right")?">":"<"    return(      <div style={dotButton(left)} onClick={this.props.onClick}>{label}</div>    )  }}class DotContainer extends React.Component{  constructor(props){    super(props);    this.state={    }  }  render(){    const { radius , children } = this.props    return(      <div style={radius?dotContainer(radius):dotContainer()}>        {children}      </div>    );  }}class DotNavigation extends React.Component{  constructor(props){    super(props);    this.state={      active: (this.props.initial != null)?this.props.initial:0,      dots: (this.props.dots != null)?this.props.dots:3,      radius: (this.props.radius != null)?this.props.radius:16    }  }  next=()=>{    const { active , dots } = this.state    if( active < dots-1 ){      this.setState({        active: active + 1,        dots: dots      })    }    this.props.onNext();  }  prev=()=>{    const { active , dots } = this.state    if( active > 0 ){      this.setState({        active: active - 1,        dots: dots      })    }    this.props.onPrev()  }  renderDots = (num,active) =>{    const ret = []    ret.push(<DotButton left={0} onClick={this.prev}/>)    for(var i=0;i<num;i++){      if( i === active ){        ret.push(<Dot active={true} left={(i+1)*24}/>)      }else{        ret.push(<Dot active={false} left={(i+1)*24}/>)      }    }    ret.push(<DotButton left={(num+1)*24} onClick={this.next} direction={"right"}/>)    return ret;  }  getOffset = () =>{    const { radius , dots } = this.state    return( (radius*(dots+2)) + ((radius/2)*(dots+1)) )/-2  }  render(){    const { active , dots , radius } = this.state    return(      <div style={dotCollection(this.getOffset())}>        <DotContainer radius={radius} >          {this.renderDots(dots,active)}        </DotContainer>      </div>    );  }}export default DotNavigation;
