import React from 'react'import * as Colors from '../lukaComponents/Colors'import * as Lits from '../Literals'import CustomCheckbox from '../lukaComponents/CustomCheckbox'import CustomDropdown from '../lukaComponents/CustomDropdown'import DotNavigation from '../lukaComponents/DotNavigation'import Footer from '../lukaComponents/Footer'import Start from '../lukaComponents/Start'import TextSegment from '../lukaComponents/TextSegment'import UserInput from '../lukaComponents/UserInput'import AppContainer from '../lukaComponents/AppContainer'import HeaderHero from '../lukaComponents/HeaderHero'import LukaFooter from '../lukaComponents/LukaFooter'import Tour from '../lukaComponents/Tour'import About from '../lukaComponents/About'import AboutBody from '../lukaComponents/AboutBody'import Contact from '../lukaComponents/Contact'import Landing from '../lukaComponents/Landing'import LandingBody from '../lukaComponents/LandingBody'import Lukatag from '../lukaComponents/Lukatag'import LukatagBody from '../lukaComponents/LukatagBody'import NotFound from '../lukaComponents/NotFound'import Success from '../lukaComponents/Success'import UnhandledState from '../lukaComponents/UnhandledState'const colorDivs = (bg, tc=Colors.White) =>{  return{    backgroundColor: bg,    textAlign: "center",    color: tc,    borderRadius: "20px",    minHeight: "40px",    paddingTop: "10px"  }}const codify = (lit) =>{  return(    <pre><code>{lit}</code></pre>  )}let dropValue = "one";export const Info=[  {    id:"Welcome to the Hola Luka Docs",    description: "",    text:<div>      This doc page has 6 section. Each section represents a different nature of components:      <ol>        <li><b>Generic components </b>are reusable react components</li>        <li><b>Concrete components </b>are specific uses of generic components</li>        <li><b>Pages </b>are hard coded components with no props. They are pages in holaluka.</li>        <li><b>Containers </b>are react components that have access to redux state.</li>        <li><b>Others </b>are special components that have a more specific purpose.</li>      </ol>    </div>  },  {    id:"Colors",    description: "A JS file with color definitions",    definitions:[      {title: "Blue500" , description: "Used as semantic primary color" , react: <div style={colorDivs(Colors.Blue500)}>#00A8FF</div> },      {title: "DeepPurple" , description: "Used as semantic secondary color" , react: <div style={colorDivs(Colors.DeepPurple)}>#793CF2</div> },      {title: "BlueGrey900" , description: "Used as header text color" , react: <div style={colorDivs(Colors.BlueGrey900)}>#424242</div> },      {title: "Grey600" , description: "Used as text color" , react: <div style={colorDivs(Colors.Grey600)}>#828282</div> },      {title: "Gainsboro" , description: "Used for LukaFooter background color" , react: <div style={colorDivs(Colors.Gainsboro)}>#DCDCDC</div> },      {title: "Black" , description: "Used for completely black text" , react: <div style={colorDivs(Colors.Black)}>#000000</div> },      {title: "White" , description: "Used for page backgrounds" , react: <div style={colorDivs(Colors.White, Colors.Black)}>#FBFBFB</div> },    ]  },  {    id:"Styles",    description: "A JS file with style definitions",    definitions:[      {title: "hiddenStyle" , description: "Style to hide elements" ,code:codify(Lits.hiddenStyleLit)},      {title: "gridStyle" , description: "Style used for grids" ,code:codify(Lits.gridStyleLit)},      {title: "formStyle" , description: "Style used in forms" ,code:codify(Lits.formStyleLit)},      {title: "bodyStyle" , description: "Style used in bodies" ,code:codify(Lits.bodyStyleLit)},      {title: "startStyle" , description: "Style used in Start component" ,code:codify(Lits.startStyleLit)},      {title: "unhandledStyle" , description: "Style used in UnhandledState page" ,code:codify(Lits.unhandledStyleLit)},      {title: "errorStyle" , description: "Style used for error messages in inputs" ,code:codify(Lits.errorStyleLit)},      {title: "getHeight()" , description: "Function used to get page height" ,code:codify(Lits.getHeightLit)},      {title: "menuStyle()" , description: "Function that returns a style given a state with a boxShadow value" ,code:codify(Lits.menuStyleLit)},      {title: "dotButton()" , description: "Function that returns style for dot in DotNavigation component, given a left value" ,code:codify(Lits.dotButtonLit)},      {title: "dotActive()" , description: "Function that returns style for an active dot in a DotNavigation component, given a left value" ,code:codify(Lits.dotActiveLit)},      {title: "dotInactive()" , description: "Function that returns style for inactive dot in a DotNavigation component, given a left value" ,code:codify(Lits.dotInactiveLit)},      {title: "dotContainer()" , description: "Function that returns style for DotContainers in a DotNavigation component, given a radius" ,code:codify(Lits.dotContainerLit)},      {title: "dotCollection()" , description: "Function that returns style for a dotCollection in a DotNavigation component, given an offset" ,code:codify(Lits.dotCollectionLit)}    ]  },  {    id:"CustomCheckbox",    description: "Adapted React Semantic-UI checkbox to use as component prop in a Redux-Form field component",    props:[      {name: "meta", default: "", type: "{custom}", description: "prop passed down to component from Redux-Form"},      {name: "meta.touched", default: "false", type: "{bool}", description: "boolean value that describes if checkbox has been touched by user. Used by Redux-Form"},      {name: "meta.errors", default: "", type: "{string}", description: "Error passed down from Redux-Form"},      {name: "text", default: "", type: "{string}", description: "Text that shows on checkbox label"},      {name: "type", default: "", type: "{string}", description: "Semantic-UI checkbox type."},      {name: "input", default: "", type: "{custom.required}", description: "Required. Handles data change. Passed down by Redux-Form"},    ],    examples:[      {title: "Pristine" , description: "Pristine checkbox." , react:<CustomCheckbox meta={{touched: false}} text="Default checkbox"/> , code:"<CustomCheckbox meta={{touched: false}} text='Default checkbox'/>"},      {title: "Touched" , description: "Touched checkbox." , react:<CustomCheckbox meta={{touched: true}} text="Touched checkbox"/> , code:"<CustomCheckbox meta={{touched: true}} text='Touched checkbox'/>"},      {title: "Error" , description: "Checkbox with error message." , react:<CustomCheckbox meta={{touched: true, error:"You must accept"}}  text="Error checkbox"/> , code:"<CustomCheckbox meta={{touched: true, error:'You must accept'}} text='Error Checkbox'/> "}    ]  },  {    id:"CustomDropdown",    description: "Adapted React Semantic-UI dropdown to use as component prop in a Redux-Form field component",    props:[      {name: "options", default: "", type: "{custom.array}", description: "options array to display on dropdown. Each option is a js object with key, text and value attributes. Key represents the key inside the array. Text is the displayed text. Values is the value that will be stored."},      {name: "input", default: "", type:"{custom.required}", description: "Required. Handles data change. Passed down by Redux-Form"},      {name: "value", default: "", type:"{custom.required}", description: "Required. Current displayed value. Passed down by Redux-Form input"},      {name: "onChange", default: "", type:"{func.required}", description: "Required. onChange handle function. Cannot be changed. Uses props.input to handle change. Passed down by Redux-Form"}    ],    examples:[      {title: "Default dropdown" , description: "Default usage" , react:<CustomDropdown options={[{key:"one",text: "one" , value:"one"}, {key:"two",text: "two" , value:"two"}]} input={{ value: dropValue }}  />, code: ""}    ]  },  {    id:"DotNavigation",    description: "A dot navigation component with arrow buttons",    props:[      {name: "intial", default: "0", type: "{integer}", description: "initial active dot"},      {name: "dots", default: "3", type: "{integer}", description: "total number of dots"},      {name: "radius", default: "16", type: "{integer}", description: "radius for each dot"},      {name: "onNext", default: "", type: "{func.required}", description: "Required. Function that executes when right arrow is pressed"},      {name: "onPrev", default: "", type: "{func.required}", description: "Required. Function that executes when left arrow is pressed"}    ],    examples:[      {title: "Default Dot Navigation" , description: "Default usage" , textAlign: "center", react: <DotNavigation onNext={() =>console.log("Next pressed") } onPrev={() => console.log("Prev pressed")}/> , code: codify(Lits.dotNavigationLit)}    ]  },  {    id:"Footer",    description: "A generic footer",    props:[      {name: "leftComponent", default: "", type: "{React.Component}", description: "Component to be displayed on the left"},      {name: "rightComponent", default: "", type: "{React.Component}", description: "Component to be displayed on the right"}    ],    examples:[      {title: "Footer", react: <Footer leftComponent={<div>Left</div>} rightComponent={<div>Right</div>} /> , code: codify(Lits.footerLit)}    ]  },  {    id:"Start",    description: "A custom component that shows centered text followed by button that redirects to different page",    props:[      {name: "title", default: "", type: "{string}", description: "Title displayer"},      {name: "subtext", default: "", type: "{string}", description: "Text displayed below title"},      {name: "buttonText", default: "", type: "{string}", description: "Label for button. If it has a falsy value, button will not be displayed"},      {name: "url", default: "\"Login\"", type: "{string}", description: "Where button redirects to. If it is not provided, it will redirect to {domain}/Login"}    ],    examples:[      {title: "Start example" , description: "Simple start example" , react: <Start title={"Hey"} subtext={"How are you?"} url={" "} buttonText={"Fine"}/> , code: codify(Lits.startLit)}    ]  },  {    id:"TextSegment",    description: "A custom component for displaying text",    props:[      {name: "basic", default: "{false}", type: "{bool}", description: "Determines whether it is a basic text segment with no header html tags. If false text segment uses html header tags to nest title and text."},      {name: "title", default: "", type: "{string} or {React.Component}", description: "Title of text segment"},      {name: "text", default: "", type: "{string} or {React.Component}", description: "Text below title"},      {name: "textAlign", default: "{\"center\"}", type: "{string}", description: "Text align for title and text"},      {name: "headerColor", default: "{\"black\"}", type: "{string} or {Semantic-UI defined Color}", description: "Color for title text"},      {name: "subtextColor", default: "{\"grey\"}", type: "{string} or {Color}", description: "Color for text"}    ],    examples:[      {title: "Default TextSegment" , description: "A default text segment" , react: <TextSegment title={"Title"} text={"text"} /> , code: codify(Lits.textSegmentDefaultLit)},      {title: "Colored TextSegment" , description: "A Colored text segment" , react: <TextSegment title={"Title"} text={"text"} headerColor={"red"} subtextColor={"blue"}/> , code: codify(Lits.textSegmentColoredLit)},      {title: "Basic TextSegment" , description: "A basic text segment" , react: <TextSegment basic title={"Title"} text={"text"} /> , code: codify(Lits.textSegmentBasicLit)},      {title: "Aligned TextSegment" , description: "A text segment with aligned text" , react: <div>                                                                                                  <TextSegment title={"Title"} text={"text"} textAlign="left"/>                                                                                                  <TextSegment title={"Title"} text={"text"} textAlign="center"/>                                                                                                  <TextSegment title={"Title"} text={"text"} textAlign="right"/>                                                                                                </div> , code: codify(Lits.textSegmentAlignLit)}    ]  },  {    id:"UserInput",    description: "Luka input field with material-like design adapted to be used with Redux-Form. If a prop that is not defined in the table below is given, it will be passed down to a React Semantic-UI Input and may alter style of Input. Requires a container for alignment",    props:[      {name: "title", default: "", type: "{string}", description: "Title for UserInput. By default it is center aligned"},      {name: "helpTitle", default: "", type: "{string}", description: "Title for help message. If given, a question mark icon will appear next to input"},      {name: "helpText", default: "", type: "{string}", description: "Text for help message. If given, a question mark icon will appear next to input"},      {name: "padded", default: "{false}", type: "{bool}", description: "If given, input will have a 30px padding. Recommended when having more than one Input"},      {name: "meta", default: "", type: "{custom.required}", description: "Required. Meta prop passed down by Redux-Form"},      {name: "meta.touched", default: "", type: "{bool.required}", description: "Required. Describes if the input has been clicked by user. Passed down by Redux-Form"},      {name: "meta.error", default: "", type: "{string.required}", description: "Required. Error passed down by Redux-Form. If touched is true and error is given, then an error message will appear"},      {name: "input", default: "", type: "{custom}", description: "Input prop passed down by Redux-Form for change handling"}    ],    examples:[      {title: "Default UserInput" , description: "a pristine UserInput" , react: <div style={{textAlign : "center"}}><UserInput title={"Name"} meta={{ touched: false }}/></div>, code: codify(Lits.userInputDefaultLit)},      {title: "Padded UserInput" , description: "a padded UserInput" , react: <div style={{textAlign: "center"}}><UserInput padded title={"Padded"} meta={{ touched: false }} /></div>, code: codify(Lits.userInputPaddedLit)},      {title: "UserInput with help" , description: "UserInput with help" , react: <div style={{textAlign: "center"}}><UserInput title={"Help"} meta={{ touched: false }} helpTitle={"This helps"} helpText={"Surely, it must help"}/></div>, code: codify(Lits.userInputHelpLit)},      {title: "Touched UserInput" , description: "a touched UserInput" , react: <div style={{textAlign : "center"}}><UserInput title={"No Difference"} placeholder={"Whatsoever"} meta={{ touched: true }}/></div>, code: codify(Lits.userInputTouchedLit)},      {title: "Error UserInput" , description: "an touched UserInput with an error" , react:<div style={{textAlign : "center"}}><UserInput title={"Error"} meta={{ touched: true, error: "Something went wrong" }}/></div> , code: codify(Lits.userInputErrorLit)},      {title: "UserInput with Additional Props" , description: "an UserInput that passes props to React Semantic-UI Input" , react: <div style={{textAlign : "center"}}>                                                                                                                                        <UserInput                                                                                                                                          padded                                                                                                                                          title={"Additional Props"}                                                                                                                                          placeholder={"Placeholder"}                                                                                                                                          label={"label"}                                                                                                                                          meta={{ touched: false }}                                                                                                                                        />                                                                                                                                        <UserInput                                                                                                                                          padded                                                                                                                                          title={"More Props"}                                                                                                                                          placeholder={"And now with dropdown"}                                                                                                                                          label={<CustomDropdown options={[{key:"one",text: "one" , value:"one"}, {key:"two",text: "two" , value:"two"}]}                                                                                                                                                                input={{ value: dropValue }}                                                                                                                                                              />}                                                                                                                                          meta={{ touched: false }}                                                                                                                                        />                                                                                                                                    </div>, code: codify(Lits.userInputAddLit)},    ]  },  {    id:"AppContainer",    description: "A component that adds a header to it's children",    props:[      {name: "children", default: "", type: "{React.Component}", description: "Components to be rendered with a HeaderHero on top. The header is fixed and as such will take some space from the first component."},    ],    examples:[      {title: "App container" , description: "usage" , react: <AppContainer><h1>Example</h1></AppContainer> , code: codify(Lits.appContainerLit)}    ]  },  {    id:"HeaderHero",    description: "Luka Navbar with logo and links on the right to about and lukatag. The Navbar gets the scroll from state and uses it to calculate boxShadow and passes it to a menuStyle",    examples:[      {title: "Header Hero" , description: "usage" , react:<HeaderHero />  , code: codify(Lits.headerHeroLit)}    ]  },  {    id:"LukaFooter",    description: "Footer with prefilled props",    examples:[      {title: "Luka Footer" , description: "" , react: <LukaFooter /> , code: codify(Lits.lukaFooterLit)}    ]  },  {    id:"Tour",    description: "A hard coded tour for onboarding. It uses two helper classes to generate tour pages: TourComponent and TourContainer. Each helper component has its own props.",    props:[      {name: "onNext", default: "", type: "{func}", description: "Function called when the end of the tour is reached"},      {name: "TourContainer: hidden", default: "false", type: "{bool}", description: "Whether component is hidden or not. Handdled by Tour"},      {name: "TourComponent: img", default: "", type: "{string}", description: "path to image to be displayed in tour page"},      {name: "TourComponent: title", default: "", type: "{string}", description: "title for the tour page text"},      {name: "TourComponent: text", default: "", type: "{string}", description: "text to show on tour page"},      {name: "TourComponent: onNext", default: "", type: "{func}", description: "Function to be passed to a DotNavigation component"},      {name: "TourComponent: onPrev", default: "", type: "{func}", description: "Function to be passed to a DotNavigation component"},      {name: "TourComponent: index", default: "", type: "{integer}", description: "Index of page inside the tour. Handdled by Tour"},    ],    examples:[      {title: "Tour" , description: "" , react: <Tour onNext={()=>{console.log("end")}}/> , code: codify(Lits.tourLit)}    ]  },  {    id:"About",    description: "A hard coded page. It is the About page of holaluka. It depends on the AboutBody, LukaFooter and Start components. In practice, it is rendered inside an AppContainer component",    examples:[      {title: "About Page" , description: "" , react: <AppContainer><About /></AppContainer> , code: codify(Lits.aboutLit)}    ]  },  {    id:"AboutBody",    description: "A hard coded component to be used inside th About page Component. It depends on i18next for text.",    examples:[      {title: "About Body" , description: "" , react: <AboutBody /> , code: codify(Lits.aboutBodyLit)}    ]  },  {    id:"Contact",    description: "A hard coded page with contact information. It uses i18next to fill the text and replaces \\n in the text with <br/>. In practice it is rendered inside an AppContainer.",    examples:[      {title: "Contact Page" , description: "" , react: <AppContainer><Contact /></AppContainer> , code: codify(Lits.contactLit)}    ]  },  {    id:"Landing",    description: "A hard coded component. It is the home page of holaluka. It depends on LandingBody, LukaFooter and Start components. In practice it is rendered inside an AppContainer.",    examples:[      {title: "Landing" , description: "" , react: <AppContainer><Landing /></AppContainer> , code: codify(Lits.landingLit)}    ]  },  {    id:"LandingBody",    description: "A hard coded component to be used inside the Landing page Component. It depends on i18next for text.",    examples:[      {title: "Landing Body" , description: "" , react: <LandingBody /> , code: codify(Lits.landingBodyLit)}    ]  },  {    id:"Lukatag",    description: "A hard coded component. It the Lukatag page on holaluka. It depends on LukatagBody, LukaFooter and Start components. In practice it is rendered inside an AppContainer.",    examples:[      {title: "Lukatag" , description: "" , react: <AppContainer><Lukatag/></AppContainer> , code: codify(Lits.lukatagLit)}    ]  },  {    id:"LukatagBody",    description: "A hard coded component to be used inside the Lukatag page Component. It depends on i18next for text.",    examples:[      {title: "Lukatag Body" , description: "" , react: <LukatagBody /> , code: codify(Lits.lukatagBodyLit)}    ]  },  {    id:"NotFound",    description: "A hard coded page to be shown when Error 404 is thrown. In practice it is rendered inside an AppContainer.",    examples:[      {title: "Not Found" , description: "" , react: <AppContainer><NotFound /></AppContainer> , code: codify(Lits.notFoundLit)}    ]  },  {    id:"Success",    description: "A hard coded page shown when user registers successfully. In practice it is rendered inside an AppContainer",    examples:[      {title: "Success" , description: "" , react: <AppContainer><Success /></AppContainer> , code: codify(Lits.successLit)}    ]  },  {    id:"UnhandledState",    description: "A hard coded page shown when the SPA enteres an undefined redux state. In practice it is rendered inside an AppContainer.",    examples:[      {title: "Unhandled State" , description: "" , react: <AppContainer><UnhandledState/></AppContainer> , code: codify(Lits.unhandledStateLit)}    ]  },]export const findById=( id )=>{  for (var i = 0; i < Info.length; i++) {    if( Info[i].id === id ){      return Info[i]    }  }  return Info[0];}